#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2022 Oak Ridge National Laboratory.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the MIT License.

import logging
import typer
import pathlib
import os

from datetime import datetime
from zambeze.log_manager import LogManager
from zambeze.orchestration.agent.agent import Agent

agent_state = {"conf_file": None}
agent_app = typer.Typer()


@agent_app.command()
def start(
    log_path: str = typer.Option(
        "", help="Path to logs on disk."), debug: bool = typer.Option(
            False, help="If debug logs are enabled."), zmq_activity_port: int = typer.Option(
                0, help="Port at which activities are received."), zmq_heartbeat_port: int = typer.Option(
                    0, help="Port for agent heartbeat communication."), config_path: str = typer.Option(
                        str(
                            pathlib.Path.home().joinpath(".zambeze").joinpath("agent.yaml")), help="Path to config.")):
    """
    Start the agent (set logger and ZMQ ports).
    """

    print(f"Log path: {log_path}")
    logger = LogManager(logging.INFO, log_path)

    if debug:
        logger.setLevel(logging.DEBUG)

    logger.info("*****************************************************")
    logger.info("*****************************************************")
    logger.info("Creating Zambeze agent subprocess with configuration:")
    logger.info("*****************************************************")
    logger.info(f"Log Path:\t\t{log_path}")
    logger.info(f"Config Path:\t\t{config_path}")
    logger.info(f"Debug Logs:\t\t{debug}")
    logger.info(f"ZMQ activity port:\t{zmq_activity_port}")
    logger.info(f"ZMQ heartbeat port:\t{zmq_heartbeat_port}")
    logger.info("*****************************************************")
    logger.info("*****************************************************")

    # Quick fix to address empty string in CL-args.
    if config_path == "":
        config_path = None

    Agent(logger=logger, conf_file=config_path)


if __name__ == "__main__":
    agent_app()
