#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2022 Oak Ridge National Laboratory.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the MIT License.

import json
import logging
import pathlib
import typer

from zambeze.orchestration.agent.agent import ZambezeSettings
from zambeze.orchestration.agent.commands import agent_start, agent_stop, agent_get_status

# Typer configuration (including 'agent' sub-app).
agent_app = typer.Typer()
app = typer.Typer()
app.add_typer(agent_app, name="agent")

# Logging and state configuration.
logger = logging.getLogger()
state = {"conf_file": None}


@agent_app.command()
def start():
    """
    Start Zambeze agent as its own daemonized subprocess. This will write logs to a user's ~/.zambeze directory and
    automatically select ports for both data and heartbeat communications.

    The 'start' command will resemble the following CLI command:

    # zambeze-agent start --log-path /Users/tylerskluzacek/.zambeze/the_log.log --debug --zmq-heartbeat-port 5002 \
    # --zmq-activity-port 5001

    """

    agent_start(logger)


@agent_app.command()
def stop():
    """
    Stop a user's running Zambeze agent.
    """

    agent_stop(logger)


@agent_app.command()
def status():
    """
    Stop a user's running Zambeze agent.
    """

    agent_get_status(logger)


@app.command()
def config(
    list: bool = typer.Option(
        False, "--list", "-l", help="List configuration options."
    ),
    file: bool = typer.Option(False, "--file", "-f", help="Show config file location."),
):
    settings = ZambezeSettings(conf_file=state["conf_file"], logger=logger)
    if file:
        typer.echo(f"Zambeze config file: {settings._conf_file}")
    if list:
        typer.echo(json.dumps(settings.settings, indent=2))


@app.callback()
def main(
    conf_filepath: str = typer.Option(
        None, "--conf", "-c", help="Zambeze configuration file."
    ),
    debug: bool = typer.Option(False, "--debug", help="Enable debug logging."),
):
    """
    Zambeze command line interface
    """
    # logging
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter(
        "[Zambeze Agent] [%(levelname)s] %(asctime)s - %(message)s"
    )
    if debug:
        logger.setLevel(logging.DEBUG)
        ch.setLevel(logging.DEBUG)
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    # configuration file
    if conf_filepath:
        state["conf_file"] = pathlib.Path(conf_filepath)


if __name__ == "__main__":
    app()
